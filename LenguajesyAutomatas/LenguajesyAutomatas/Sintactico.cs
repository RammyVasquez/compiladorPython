using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LenguajesyAutomatas
{
    public class Sintactico
    {
       /* public Sintactico()
        {
            //                     public class x {    }
            listaTokens = new int[] { -106,-1,-40,-99 };
            EjecutarSintactico(listaTokens);
        }*/

        public int[,] MatrizTransicionSintantico = new int[,]
      {
                             //	 Id   | entero |decimal|cadena|	  +   |   -	   |  *	  |   /   |	  %   |	 **    | //   |	 ==	  |  !=   |	  <>   |  >   |	  <   |  >=    |  <=   |  =   |	 +=   |	 -=   |	 *=	  |  /=   |	 %=	  | **=	  | //=	  |  &	|    |    |  :	  |   .	  |   ;   |	  ,   |	  (	 |    )   |	 [    |	 ]   |	 {   |	  }   |	enter |	False|	 def  |  if	  | raise |	None  |  del   |import |return |True |	elif  |	 in   |	 try  |  and  |  esle  | is  |	while  | as  |	except |lambda |with  |assert |finally|nonlocal|yield | break |  for  |  not  | class | from |   or	  |continue|global|	pass  |	print |	self  |	input |	range |	EoF|
                            //	 -1	     -2	     -3	     -4	     -5	     -6	     -7	     -8	     -9	    -10	    -11	    -12	     -13	 -14	 -15	 -16	-17	     -18	 -19	 -20	 -21	 -22	 -23	-24	    -25	    -26	    -27	    -28	    -29	    -30	    -31	     -32	-33	    -34	    -35	    -36	    -37	    -38	    -40	    -100	-101	-102	-103	-104	-105	-106	-107	-108	-109	-110	-111	-112	-113	-114	-115	-116	-117	-118	-119	-120	-121	-122	-123	-124	-125	-126	-127	-128	-129	-130	-131	-132	-133	-134	-135	-136	

             /*	1000	*/  {},
            /*	1001	*/  {},
            /*	1002	*/  {},
            /*	1003	*/  {},
            /*	1004	*/  {},
            /*	1005	*/  {},
            /*	1006	*/  {   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,      8,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,   -604,     91,  },
            /*	1007	*/  {},
            /*	1008	*/  {},
            /*	1009	*/  {     13,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,     12,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -605,   -601,  },
            /*	1010	*/  {},
            /*	1011	*/  {},
            /*	1012	*/  {},
            /*	1013	*/  {},
            /*	1014	*/  {},
            /*	1015	*/  {},
            /*	1016	*/  {     22,     22,     22,     22,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -608,   -601,  },
            /*	1017	*/  {},
            /*	1018	*/  {},
            /*	1019	*/  {},
            /*	1020	*/  {},
            /*	1021	*/  {},
            /*	1022	*/  {},
            /*	1023	*/  {},
            /*	1024	*/  {   -613,   -613,   -613,   -613,     38,     39,     40,     41,     42,     43,     44,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -613,   -601,  },
            /*	1025	*/  {},
            /*	1026	*/  {     48,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     47,   -615,   -615,   -615,     48,   -615,   -615,   -615,   -615,     48,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     48,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     48,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     48,   -615,     48,   -615,    -601, },
            /*	1027	*/  {     54,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     49,   -615,   -615,   -615,   -615,     56,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     51,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     50,   -615,   -615,   -615,   -615,   -615,   -615,   -615,     52,   -615,     53,   -615,   -601,  },
            /*	1028	*/  {},
            /*	1029	*/  {     58,     58,     58,     58,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,     58,   -617,   -617,   -617,   -617,   -617,   -617,   -617,     58,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -617,   -601,  },
            /*	1030	*/  {     59,     59,     59,     59,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,     61,   -618,   -618,   -618,   -618,   -618,   -618,   -618,     60,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -618,   -601,  },
            /*	1031	*/  {   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,     62,     63,     64,     65,     66,     67,     68,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -619,   -601,  },
            /*	1032	*/  {},
            /*	1033	*/  {   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,     71,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -620,     72,   -620,   -620,   -620,   -620,   -620,   -620,   -620,   -601,  },
            /*	1034	*/  {   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,     73,    73,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,     75,   -621,   -621,   -621,     74,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -601,  },
            /*	1035	*/  {},
            /*	1036	*/  {},
            /*	1037	*/  {},
            /*	1038	*/  {     19,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -607,   -601,  },
            /*	1039	*/  {},
            /*	1040	*/  {},
            /*	1041	*/  {},
            /*	1042	*/  {},
            /*	1043	*/  {},
            /*	1044	*/  {},
            /*	1045	*/  {},
            /*	1046	*/  {   -628,   -628,   -628,   -628,     89,     89,     89,     89,     89,     89,     89,   -628,   -628,   -628,   -628,   -628,   -628,   -628,     89,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,     89,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -628,   -601,  },
            /*	1047	*/  {},
            /*	1048	*/  {   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,     93,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,     94,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,    -628,  -628,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -621,   -601,  }


      };

        public int[,] RepositorioReglas = new int[,]
        {
            /*	0	*/	/*	<	S	>	*/	{   1001   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	1	*/	/*	<	Programa	>	*/	{   1006   ,   1002   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	2	*/	/*	<	Librerias	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	3	*/	/*	<	Librerias	>	*/	{   1002   ,   1003   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	4	*/	/*	<	Librería	>	*/	{   1004   ,   -1  ,   -106    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	5	*/	/*	<	Enter	>	*/	{   1005   ,   -40 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	6	*/	/*	<	Ent	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	7	*/	/*	<	Ent	>	*/	{   1004   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	8	*/	/*	<	Clases	>	*/	{   1007   ,   1008   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	9	*/	/*	<	Otraclase	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	10	*/	/*	<	Otraclase	>	*/	{   1006   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	11	*/	/*	<	Clase	>	*/	{   1004   ,   -38 ,   1010   ,1004  , -37 ,   -40 ,   -29 ,   -34 ,   1009   ,   -33 ,   -1  ,   -127    ,   -999   ,   0     },
            /*	12	*/	/*	<	Herencia	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	13	*/	/*	<	Herencia	>	*/	{   -1  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	14	*/	/*	<	Miembros	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	15	*/	/*	<	Miembros	>	*/	{   1010   ,   1011   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	16	*/	/*	<	Miembro	>	*/	{   1012   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	17	*/	/*	<	Metatrib	>	*/	{   1013   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	18	*/	/*	<	Metatrib	>	*/	{   1014   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	19	*/	/*	<	Metatrib1	>	*/	{   1004 ,   1015   ,   -1  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	20	*/	/*	<	Metatrib2	>	*/	{   1004   ,   -38 ,   1026   , 1004 , -37 ,   -40 ,   -29 ,   -34 ,   1025   ,   -134    ,   -33 ,   -1  ,   -101    ,   -999    },
            /*	21	*/	/*	<	Asignacion	>	*/	{   1016   ,   -19    ,   -999   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	22	*/	/*	<	Exp	>	*/	{   1023   ,   1017   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	23	*/	/*	<	Factor	>	*/	{   1044   ,   -1  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	24	*/	/*	<	Factor	>	*/	{   -2  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	25	*/	/*	<	Factor	>	*/	{   -3  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	26	*/	/*	<	Factor	>	*/	{   -4  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	27	*/	/*	<	Inv	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	28	*/	/*	<	Invocacion	>	*/	{   -34 ,   1020   ,   -33 ,   1019  ,   -1   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	29	*/	/*	<	Idclase	>	*/	{   -30 ,   -1  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	30	*/	/*	<	Idclase	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	31	*/	/*	<	Valparams	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	32	*/	/*	<	Valparams	>	*/	{   1021   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	33	*/	/*	<	Valparam	>	*/	{   1022   ,   1016   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	34	*/	/*	<	Masvalparam	>	*/	{   1021   ,   -32 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	35	*/	/*	<	Masvalparam	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	36	*/	/*	<	Termino	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0   },
            /*	37	*/	/*	<	Termino	>	*/	{   1016   ,   1024   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0  },
            /*	38	*/	/*	<	Oparit	>	*/	{   -5  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0},
            /*	39	*/	/*	<	Oparit	>	*/	{   -6  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	40	*/	/*	<	Oparit	>	*/	{   -7  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	41	*/	/*	<	Oparit	>	*/	{   -8  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	42	*/	/*	<	Oparit	>	*/	{   -9  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	43	*/	/*	<	Oparit	>	*/	{   -10 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	44	*/	/*	<	Oparit	>	*/	{   -11 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	45	*/	/*	<	Params	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	46	*/	/*	<	Params	>	*/	{   1025   ,   -1  ,   -32 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	47	*/	/*	<	Sents	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	48	*/	/*	<	Sents	>	*/	{   1026   ,   1027   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	49	*/	/*	<	Sent	>	*/	{   1028   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	50	*/	/*	<	Sent	>	*/	{   1040   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	51	*/	/*	<	Sent	>	*/	{   1035   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	52	*/	/*	<	Sent	>	*/	{   1036   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	53	*/	/*	<	Sent	>	*/	{   1037   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	54	*/	/*	<	Sent	>	*/	{   1046   ,   -1  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	55	*/	/*	<	Sent	>	*/	{   -999    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	56	*/	/*	<	Sent	>	*/	{   1039   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	57	*/	/*	<	IF	>	*/	{    1004 , 1047   ,   -38 ,   1026   ,1004,   -37 ,   -40 ,   -29 ,   1029   ,   -102    ,   -999    ,   0   ,   0   ,   0   },
            /*	58	*/	/*	<	Cond	>	*/	{   1032   ,   1030   ,   1031   ,   1030   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	59	*/	/*	<	Exp2	>	*/	{   1016   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0,   0   },
            /*	60	*/	/*	<	Exp2	>	*/	{   -108    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	61	*/	/*	<	Exp2	>	*/	{   -100    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	62	*/	/*	<	Oplog	>	*/	{   -12 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	63	*/	/*	<	Oplog	>	*/	{   -13 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	64	*/	/*	<	Oplog	>	*/	{   -14 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	65	*/	/*	<	Oplog	>	*/	{   -15 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	66	*/	/*	<	Oplog	>	*/	{   -16 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	67	*/	/*	<	Oplog	>	*/	{   -17 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	68	*/	/*	<	Oplog	>	*/	{   -18 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	69	*/	/*	<	Mascond	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	70	*/	/*	<	Mascond	>	*/	{   1029   ,   1033   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	71	*/	/*	<	Op2	>	*/	{   -112    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	72	*/	/*	<	Op2	>	*/	{   -129    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	73	*/	/*	<	ELSES	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	74	*/	/*	<	ELSES	>	*/	{   -38 ,   1026   , 1004 , -37 ,   -40 ,   -29 ,   -113    ,   -999    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   },
            /*	75	*/	/*	<	ELSES	>	*/	{   1034  ,-38 ,   1026 , 1004  ,   -37 ,   -40 ,   -29 ,   1029   ,   -109    ,   -999    ,   -999    ,   0   ,   0   ,0},
            /*	76	*/	/*	<	WHILE	>	*/	{   1004   ,   -38 ,   1026   , 1004 , -37 ,   -40 ,   -29 ,   1029   ,   -115    ,   -999    ,   0   ,   0   ,   0   ,   0  },
            /*	77	*/	/*	<	WRITE	>	*/	{   1004   ,   -34 ,   1016   ,   -33 ,   -133    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	78	*/	/*	<	READ	>	*/	{   1004   ,   -34 ,   1016   ,   -33 ,   -135    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	79	*/	/*	<	ASIG	>	*/	{   1013   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	80	*/	/*	<	RETURN	>	*/	{   1004   ,   1016   ,   -107    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	81	*/	/*	<	FOR	>	*/	{   1004   ,   -38 ,   1026   ,  1004, -37 ,   -40 ,   -29 ,   1041   ,   -110    ,   -1  ,   -125    ,   -999    ,   0   ,   0 },
            /*	82	*/	/*	<	Rango	>	*/	{   -34 ,   1043   ,   1043   ,   1042   ,   -33 ,   -136    ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	83	*/	/*	<	Ran	>	*/	{   -1  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	84	*/	/*	<	Ran	>	*/	{   -2  ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	85	*/	/*	<	Ran2	>	*/	{   -79 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	86	*/	/*	<	Rand2	>	*/	{   1042   ,   -32 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	87	*/	/*	<	Inv	>	*/	{   -34 ,   1020   ,   -33 ,   -1  ,   -30 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	88	*/	/*	<	Asign 	>	*/	{   1004   ,   1015    ,   -999   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	89	*/	/*	<	Amb	>	*/	{   1048   ,   -999   ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	90	*/	/*	<	ELSE	>	*/	{   1034   ,   -40 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	91	*/	/*	<	Clases	>	*/	{   -79   ,   -999 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0  ,   0 },
            /*	92	*/	/*	<	Imv	    >	*/	{   -79   ,   -999 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	93	*/	/*	<	amb1	>	*/	{   1045  ,   -999 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },
            /*	94	*/	/*	<	amb1    >	*/	{   1004   ,   1044 ,   -999    ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0 ,   0  },

        };

       

        private int[] listaTokens = new int[500];
        private string[] listaLexemas = new string[500];
        private int[] listaSintactico = new int[500];
        int puntero = 0;
        int punteroReglas = 1;
        private bool banderaError = false;

        public void EjecutarSintactico(int [] ListaDeTokens, string[] listaDeLexemas)
        {
            
            //listaTokens[listaTokens.Length + 1] = -99;
            listaSintactico[0] = -99;
            listaSintactico[1] = 1000;
            listaLexemas = listaDeLexemas;
            int renglon, columna = 0;
            int regla;

            do
            {
                if (listaSintactico[punteroReglas] < 0)
                {
                    if (listaSintactico[punteroReglas] == -79)
                        punteroReglas--;

                    else if (listaSintactico[punteroReglas] == ListaDeTokens[puntero])
                    {
                        if (listaSintactico[punteroReglas] == -99)
                        {
                            if (banderaError)
                            {
                                MessageBox.Show("Sintactico Analizado con errores");
                            }
                            else
                            {
                                MessageBox.Show(@"Sintactico Correcto");
                            }
                            break;
                        }
                        else
                        {
                            puntero++;
                            punteroReglas--;
                        }


                    }
                    else
                    {
                        MessageBox.Show("Upsss ");
                        // cuando falta
                        punteroReglas--;
                        banderaError = true;
                    }
                }
                else
                {
                    renglon = BuscarRenglon(listaSintactico[punteroReglas]);
                    columna = BuscarColumna(ListaDeTokens[puntero]) ;

                    regla = MatrizTransicionSintantico[renglon, columna]+1;

                    if (regla > 0)
                    {
                        InsertarRegla(regla);
                        InsertarTablaSimbolos(regla - 1); //TOMA LA REGLA, VERIFICA LEXEMA E INSERTA EN TABLA DE SIMBOLOS

                    }
                    else
                    {
                        string erro = MatrizTransicionSintantico[renglon, columna].ToString();
                        MessageBox.Show("Error!!!!   "+erro);
                        puntero = ListaDeTokens.Length + 10;
                        //manejador de errores
                    }
                }
            } while (ListaDeTokens.Length >= puntero);
        }

        private void InsertarTablaSimbolos(int regla)
        {
            try
            {
                string _lexema;
                switch(regla)
                {
                    case 11: //CLASE
                        _lexema = listaLexemas[puntero + 1];
                        MessageBox.Show(_lexema);
                        break;

                    case 13: //HERENCIA
                        _lexema = listaLexemas[puntero];
                        MessageBox.Show(_lexema);
                        break;

                    case 19: //ATRIBUTO
                        _lexema = listaLexemas[puntero];
                        MessageBox.Show(_lexema);
                        break;
                    case 20: //METODO
                        _lexema = listaLexemas[puntero + 1];
                        MessageBox.Show(_lexema);
                        break;
                    case 46: //PARAMETROS
                        _lexema = listaLexemas[puntero + 1];
                        MessageBox.Show(_lexema);
                        break;
                    case 93: //VARIABLE
                        _lexema = listaLexemas[puntero - 1];
                        MessageBox.Show(_lexema);
                        break;
                }
            }
            catch(Exception) { }
        }

        private void InsertarRegla(int regla)
        {
            int i = 0;
            do
            {
                listaSintactico[punteroReglas] =
                RepositorioReglas[regla -1, i];
                punteroReglas++;
                i++;

            } while (RepositorioReglas[regla - 1, i] != -999);
            punteroReglas--;
        }

        private int BuscarColumna(int token)
        {
            switch (token)
            {
                case -1: /*Id*/
                    return 0;

                case -2: /*Entero*/
                    return 1;

                case -3: /*Decimal*/
                    return 2;

                case -4: /*Cadena*/
                    return 3;

                case -5: /*+*/
                    return 4;

                case -6: /*-*/
                    return 5;

                case -7: /***/
                    return 6;

                case -8: /*/*/
                    return 7;

                case -9: /*%*/
                    return 8;

                case -10: /****/
                    return 9;

                case -11: /*//*/
                    return 10;

                case -12: /*==*/
                    return 11;

                case -13: /*!=*/
                    return 12;

                case -14: /*<>*/
                    return 13;

                case -15: /*>*/
                    return 14;

                case -16: /*<*/
                    return 15;

                case -17: /*>=*/
                    return 16;

                case -18: /*<=*/
                    return 17;

                case -19: /*=*/
                    return 18;

                case -20: /*+=*/
                    return 19;

                case -21: /*-=*/
                    return 20;

                case -22: /**=*/
                    return 21;

                case -23: /*/=*/
                    return 22;

                case -24: /*%=*/
                    return 23;

                case -25: /***=*/
                    return 24;

                case -26: /*//=*/
                    return 25;

                case -27: /*&*/
                    return 26;

                case -28: /*|*/
                    return 27;

                case -29: /*:*/
                    return 28;

                case -30: /*.*/
                    return 29;

                case -31: /*;*/
                    return 30;

                case -32: /*,*/
                    return 31;

                case -33: /*(*/
                    return 32;

                case -34: /*)*/
                    return 33;

                case -35: /*[*/
                    return 34;

                case -36: /*]*/
                    return 35;

                case -37: /*{*/
                    return 36;

                case -38: /*}*/
                    return 37;

                case -40: /*Enter*/
                    return 38;

                case -100: /*False*/
                    return 39;

                case -101: /*def*/
                    return 40;

                case -102: /*if*/
                    return 41;

                case -103: /*raise*/
                    return 42;

                case -104: /*None*/
                    return 43;

                case -105: /*del*/
                    return 44;

                case -106: /*import*/
                    return 45;

                case -107: /*return*/
                    return 46;

                case -108: /*True*/
                    return 47;

                case -109: /*elif*/
                    return 48;

                case -110: /*in*/
                    return 49;

                case -111: /*try*/
                    return 50;

                case -112: /*and*/
                    return 51;

                case -113: /*else*/
                    return 52;

                case -114: /*is*/
                    return 53;

                case -115: /*while*/
                    return 54;

                case -116: /*as*/
                    return 55;

                case -117: /*except*/
                    return 56;

                case -118: /*lambda*/
                    return 57;

                case -119: /*whit*/
                    return 58;

                case -120: /*assert*/
                    return 59;

                case -121: /*finally*/
                    return 60;

                case -122: /*nonlocal*/
                    return 61;

                case -123: /*yield*/
                    return 62;

                case -124: /*break*/
                    return 63;

                case -125: /*for*/
                    return 64;

                case -126: /*not*/
                    return 65;

                case -127: /*class*/
                    return 66;

                case -128: /*from*/
                    return 67;

                case -129: /*or*/
                    return 68;

                case -130: /*continue*/
                    return 69;

                case -131: /*global*/
                    return 70;

                case -132: /*pass*/
                    return 71;

                case -133: /*print*/
                    return 72;

                case -134: /*self*/
                    return 73;

                case -135: /*input*/
                    return 74;

                case -136: /*range*/
                    return 75;

                default:
                    return 76;


            }
        }

        private int BuscarRenglon(int regla)
        {
            switch (regla)
            {
                case 1000: /*<S>*/
                    return 0;

                case 1001: /*<Programas>*/
                    return 1;

                case 1002: /*<Librerias>*/
                    return 2;

                case 1003: /*<Libreria>*/
                    return 3;

                case 1004: /*<Enter>*/
                    return 4;

                case 1005: /*<Ent>*/
                    return 5;

                case 1006: /*<Clases>*/
                    return 6;

                case 1007: /*<Otraclase>*/
                    return 7;

                case 1008: /*<Clase>*/
                    return 8;

                case 1009: /*<Herencia>*/
                    return 9;

                case 1010: /*<Miembros>*/
                    return 10;

                case 1011: /*<Miembro>*/
                    return 11;

                case 1012: /*<Metatrib>*/
                    return 12;

                case 1013: /*<Metatrib1>*/
                    return 13;

                case 1014: /*<Metatrib2>*/
                    return 14;

                case 1015: /*<Asignacion>*/
                    return 15;

                case 1016: /*<Exp>*/
                    return 16;

                case 1017: /*<Factor>*/
                    return 17;

                case 1018: /*<Invocacion>*/
                    return 18;

                case 1019: /*<Idclase>*/
                    return 19;

                case 1020: /*<Valparams>*/
                    return 20;

                case 1021: /*<Valparam>*/
                    return 21;

                case 1022: /*<Masvalparam>*/
                    return 22;

                case 1023: /*<Termino>*/
                    return 23;

                case 1024: /*<Oparit>*/
                    return 24;

                case 1025: /*<Params>*/
                    return 25;

                case 1026: /*<Sents>*/
                    return 26;

                case 1027: /*<Sent>*/
                    return 27;

                case 1028: /*<IF>*/
                    return 28;

                case 1029: /*<Cond>*/
                    return 29;

                case 1030: /*<Exp2>*/
                    return 30;

                case 1031: /*<Oplog>*/
                    return 31;

                case 1032: /*<Mascond>*/
                    return 32;

                case 1033: /*<Op2>*/
                    return 33;

                case 1034: /*<ELSES>*/
                    return 34;

                case 1035: /*<WHILE>*/
                    return 35;

                case 1036: /*<WRITE>*/
                    return 36;

                case 1037: /*<READ>*/
                    return 37;

                case 1038: /*<ASIG>*/
                    return 38;

                case 1039: /*<RETURN>*/
                    return 39;

                case 1040: /*<FOR>*/
                    return 40;

                case 1041: /*<Rango>*/
                    return 41;

                case 1042: /*<Ran>*/
                    return 42;

                case 1043: /*<Ran2>*/
                    return 43;

                case 1044: /*<Inv>*/
                    return 44;

                case 1045: /*<Asign>*/
                    return 45;

                case 1046: /*<Amb>*/
                    return 46;

                case 1047: /*<ELSE>*/
                    return 47;

                case 1048: /*<Amb1>*/
                    return 48;

                default:
                    return 49;
            }

        }

    }
}
